# General Code Style & Formatting

- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.
- Follow Expo's official documentation (v52.0.x) for setting up and configuring projects.

# Naming Conventions

- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

# TypeScript Best Practices

- Use TypeScript (v5.3.3) for all code; prefer interfaces over types.
- Avoid any and enums; use explicit types and maps instead.
- Use functional components with TypeScript interfaces.
- Enable strict mode in TypeScript for better type safety.

# Syntax & Formatting

- Use the function keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.
- Use Prettier for consistent code formatting.

# Styling & UI

- Use NativeWind (v4.1.23) and TailwindCSS (v3.4.17) for styling.
- Implement responsive design with Flexbox and useWindowDimensions.
- Implement dark mode support using Expo's useColorScheme.
- Ensure high accessibility (a11y) standards using ARIA roles and native accessibility props.
- Use react-native-reanimated (v3.16.1) and react-native-gesture-handler (v2.20.2) for performant animations and gestures.
- Use Expo Blur (v14.0.3) and Linear Gradient (v14.0.2) for advanced UI effects.

# State Management & Data Fetching

- Use Zustand (v5.0.3) for global state management.
- Implement TanStack Query (v5.71.10) for data fetching and caching.
- Use React Hook Form (v7.55.0) with Zod (v3.24.2) for form validation.

# Navigation

- Use Expo Router (v4.0.20) as the primary navigation solution.
- Implement React Navigation (v7.x) for tab navigation and complex flows.
- Use safe-area-context (v4.12.0) for handling device-specific safe areas.

# Security & Storage

- Use Expo Secure Store (v14.0.1) for storing sensitive information.
- Implement proper authentication flows with token management.

# Performance

- Implement proper memoization with React.memo and useCallback/useMemo.
- Use Expo's optimized components whenever possible.
- Implement virtualized lists for large data sets.
